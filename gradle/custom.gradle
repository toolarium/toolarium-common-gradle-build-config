/*
 * custom.gradle
 *
 * In the custom you can extend the build process with own common tasks.
 * The custom.gradle will be called (apply) at the end of the specific
 * common-gradle-build project type.
 *
 * The custom.gradle can consider the corresponding type with the help 
 * of the variable projectType.
 *
 */


/***************************************************************************************
 * Define own tasks or extend
 ***************************************************************************************/


/***************************************************************************************
 * Add to every kubernetes artefact common environment variables
 ***************************************************************************************/
if ("${projectType}".toString().equals("kubernetes-product")) {
    processKubernetesDependencies {
        doFirst {
            mkdir "${gradleBuildDirectory}/${kubernetesProductEnvironmentVariablePath}"
            def outputFile = new File("$kubernetesProductEnvironmentVariableFilename");
            def productEnvironmentInformation = "${rootProject.name}|${productName}|${project.version}|${productOrganisation}|${copyrightText}|" + createHash(12)
            outputFile.append("ENV_INFORMATION=" + encodeBase64(productEnvironmentInformation).toString() + NELINE)

            if (project.hasProperty("publicKeyFilename") && new File(project.getProperty("publicKeyFilename")).exists()) {
                outputFile.append("ENV_APP_KEY=" + readPublicKeyFromFile(project.getProperty("publicKeyFilename")) + NELINE)

                if (project.hasProperty("privateKeyFilename") && new File(project.getProperty("privateKeyFilename")).exists()) {
                    def hash = signMessage(project.getProperty("privateKeyFilename"), productEnvironmentInformation, messageDigestSignAlgorithm)
                    outputFile.append("FP_APP_SIGN={" + messageDigestSignAlgorithm + "}" + hash + NELINE)
                    def result = verifyMessage(project.getProperty("publicKeyFilename"), productEnvironmentInformation, hash)
                    printInfo "verified: $result"
                }
            }
        }
    }
}